import { fileURLToPath, URL } from 'url';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';
import environment from 'vite-plugin-environment';
import dotenv from 'dotenv';
import fs from 'fs';

dotenv.config({ path: '../../.env' });

const isDev = process.env['DFX_NETWORK'] === 'local';
// Get the network name, or `local` by default.
const networkName = process.env['DFX_NETWORK'] || 'local';

let canisterIds = {}; 
try {
	canisterIds = JSON.parse(
		fs.readFileSync(isDev ? '../../.dfx/local/canister_ids.json' : './canister_ids.json').toString()
	);
} catch (e) {
  console.error(e);
	console.error('\n⚠️  Before starting the dev server run: dfx deploy\n\n');
}

const canisterDefinitions = Object.entries(canisterIds).reduce(
	(acc, [key, val]) => ({
		...acc,
		[`process.env.${key.toUpperCase()}_CANISTER_ID`]: JSON.stringify(val[networkName]),
		[`process.env.CANISTER_ID_${key.toUpperCase()}`]: JSON.stringify(val[networkName])
	}),
	{}
);

export default defineConfig({
	build: {
		emptyOutDir: true
	},
	optimizeDeps: {
		esbuildOptions: {
			define: {
				global: 'globalThis'
			}
		}
	},
	server: {
		proxy: {
			'/api': {
				target: 'http://127.0.0.1:4943',
				changeOrigin: true
			}
		}
	},
	plugins: [
		sveltekit(),
		environment('all', { prefix: 'CANISTER_' }),
		environment('all', { prefix: 'DFX_' })
	],
	define: {
		// Here we can define global constants
		// This is required for now because the code generated by dfx relies on process.env being set
		...canisterDefinitions,
		'process.env.NODE_ENV': JSON.stringify(isDev ? 'development' : 'production'),
		'process.env.DFX_NETWORK': JSON.stringify(process.env['DFX_NETWORK']),
		global: process.env.NODE_ENV === 'development' ? 'globalThis' : 'global'
	},
	resolve: {
		alias: [
			{
				find: 'declarations',
				replacement: fileURLToPath(new URL('../declarations', import.meta.url))
			}
		]
	}
});
